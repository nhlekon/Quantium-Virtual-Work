#### Load required libraries

> library(data.table)
> library(ggplot2)
> library(ggmosaic)
> library(readr)

> ###Creating dataset

> purchaseBehaviour <- as.data.table(read.csv("QVI_purchase_behaviour.csv"))
> transactionData <- as.data.table(readxl::read_xlsx("QVI_transaction_data.xlsx"))

### Examining transaction data

> str(purchaseBehaviour)
> str(transactionData)

#### Convert DATE column to a date format
> transactionData$DATE <- as.Date(transactionData$DATE, origin = "1899-12-30")

check that we are looking at the right products by examining PROD_NAME
#### Examine PROD_NAME

> transactionData[, .N, PROD_NAME]

Looks like we are definitely looking at potato chips but how can we check that
these are all chips? We can do some basic text analysis by summarising the
individual words in the product name.

#### Examine the words in PROD_NAME to see if there are any incorrect entries
#### such as products that are not chips
> productWords <- data.table(unlist(strsplit(unique(transactionData[, PROD_NAME]), "
	")))
	setnames(productWords,'words')

As we are only interested in words that will tell us if the product is chips or
not, let's remove all words with digits and special characters such as '&' from our
set of product words. We can do this using `grepl()`.

> library(stringr)
> library(stringi)

#### Removing digits
> productWords$words <- str_replace_all(productWords$words,"[[:punct:]]"," ")

#### Removing special characters
> productWords$words <- str_replace_all(productWords$words,"[0-9]"," ")
> productWords$words <- str_replace_all(productWords$words,"[gG]"," ")

#### Let's look at the most common words by counting the number of times a word
appears and
> wordsSep <- strsplit(productWords$words," ")
> words.freq<-table(unlist(wordsSep))

#### sorting them by this frequency in order of highest to lowest frequency
> words.freq <-  as.data.frame(words.freq)
> words.freq <- words.freq[order(words.freq$Freq, decreasing = T),]

There are salsa products in the dataset but we are only interested in the chips
category, so let's remove these.

#### Remove salsa products
> transactionData[, SALSA := grepl("salsa", tolower(PROD_NAME))]
> transactionData <- transactionData[SALSA == FALSE, ][, SALSA := NULL]

we can use `summary()` to check summary statistics such as mean, min and max
values for each feature to see if there are any obvious outliers in the data and if
there are any nulls in any of the columns (`NA's : number of nulls` will appear in
the output if there are any nulls).

#### Summarise the data to check for nulls and possible outliers
> summary("transactionData")

There are no nulls in the columns but product quantity appears to have an outlier
which we should investigate further. Let's investigate further the case where 200
packets of chips are bought in one transaction.

#### Filter the dataset to find the outlier
> library(tidyverse)
> library(dplyr)
> transactionData %>% filter(PROD_QTY==200)

#### Let's see if the customer has had other transactions
> IsItSameCustomer <- transactionData %>% filter(LYLTY_CARD_NBR == 226000) 

#### Removing this customer from the list
> transactionData <- transactionData[!(transactionData$LYLTY_CARD_NBR == 226000)]

#### Re-examine transaction data
> summary(transactionData)

That's better. Now, let's look at the number of transaction lines over time to see
if there are any obvious data issues such as missing data.

#### Count the number of transactions by date

> countByDate <- count(transactionData, transactionData$DATE)
> countByDate
> nrow(countByDate)
> summary(countByDate)

here's only 364 rows, meaning only 364 dates which indicates a missing date. Let's
create a sequence of dates from 1 Jul 2018 to 30 Jun 2019 and use this to create a
chart of number of transactions over time to find the missing date.

#### Create a sequence of dates and join this the count of transactions by date

> transaction_by_day <- transactionData[order(DATE),]

#### Setting plot themes to format graphs

> theme_set(theme_bw())
> theme_update(plot.title = element_text(hjust = 0.5))

#### Plot transactions over time

> transOverTime <-ggplot(countByDate, aes(x = countByDate$`transactionData$DATE`, y = countByDate$n)) +
 geom_line() +
 labs(x = "Day", y = "Number of transactions", title = "Transactions over time") +
 scale_x_date(breaks = "1 month") +
 theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
> transOverTime

We can see that there is an increase in purchases in December and a break in late
December. Let's zoom in on this.

#### Filter to December and look at individual days

> filterData <- countByDate[countByDate$`transactionData$DATE` >= "2018-12-01" & countByDate$`transactionData$DATE` <= "2018-12-31"]
	ggplot(filterData, aes(x = filterData$`transactionData$DATE`, y = filterData$n)) +
 	geom_line() +
 	labs(x = "Day", y = "Number of transactions", title = "Transactions in December") +
 	scale_x_date(breaks = "1 day") +
 	theme(axis.text.x = element_text(angle = 90, vjust = 0.5))

We can see that the increase in sales occurs in the lead-up to Christmas and that
there are zero sales on Christmas day itself. This is due to shops being closed on
Christmas day.

Now that we are satisfied that the data no longer has outliers, we can move on to
creating other features such as brand of chips or pack size from PROD_NAME. We will
start with pack size.

#### Pack size
#### We can work this out by taking the digits that are in PROD_NAME

> transactionData[, PACK_SIZE := parse_number(PROD_NAME)]

#### Always check your output
#### Let's check if the pack sizes look sensible

> transactionData[, .N, PACK_SIZE][order(PACK_SIZE)]

The largest size is 380g and the smallest size is 70g - seems sensible!

#### Let's plot a histogram of PACK_SIZE since we know that it is a categorical
variable and not a continuous variable even though it is numeric.

> #ggplot(df_packSizeVsTransactions, aes(x = df_packSizeVsTransactions$PACK_SIZE, y = df_packSizeVsTransactions$N)) +
	# geom_line() +
 	#labs(x = "Pack Sizes", y = "Number of transactions", title = "Transactions #over time") + scale_x_continuous(breaks = seq(70,390,20)) +
	 #theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
> hist(transactionData[, PACK_SIZE])

Pack sizes created look reasonable. 

#### Brands
Now to create brands, we can use the first word in PROD_NAME to work out the brand
name 

#Create a column which contains the brand of the product, by extracting it from the product name.

> transactionData$BRAND <- gsub("([A-Za-z]+).*", "\\1", transactionData$PROD_NAME)
> transactionData[, .N, by = BRAND][order(N)]

Some of the brand names look like they are of the same brands - such as RED and
RRD, which are both Red Rock Deli chips. Let's combine these together.

#### Clean brand names

> transactionData[BRAND == "RED", BRAND := "RRD"]
> transactionData[BRAND == "SNBTS", BRAND := "SUNBITES"]
> transactionData[BRAND == "INFZNS", BRAND := "INFUZIONS"]
> transactionData[BRAND == "WW", BRAND := "WOOLWORTHS"]
> transactionData[BRAND == "SMITH", BRAND := "SMITHS"]
> transactionData[BRAND == "NCC", BRAND := "NATURAL"]
> transactionData[BRAND == "DORITO", BRAND := "DORITOS"]
> transactionData[BRAND == "GRAIN", BRAND := "GRNWVES"]

###Check again
> transactionData[, .N, by = BRAND][order(BRAND)]

## Examining customer data

Now that we are happy with the transaction dataset, let's have a look at the
customer dataset.

> summary(purchaseBehaviour)

Letâ€™s have a closer look at the LIFESTAGE and PREMIUM_CUSTOMER columns.

#### Examining the values of lifestage and premium_customer

> purchaseBehaviour[, .N, by = LIFESTAGE][order(-N)]
> purchaseBehaviour[, .N, by = PREMIUM_CUSTOMER][order(N)]

#### Merge transaction data to customer data

> data <- merge(transactionData, purchaseBehaviour, all.x = TRUE)

#### Merge transaction data to customer data

> data <- merge(transactionData, purchaseBehaviour, all.x = TRUE)


As the number of rows in `data` is the same as that of `transactionData`, we can be
sure that no duplicates were created. This is because we created `data` by setting
`all.x = TRUE` (in other words, a left join) which means take all the rows in
`transactionData` and find rows with matching values in shared columns and then
joining the details in these rows to the `x` or the first mentioned table.

#### Let's also check if some customers were not matched on by checking for nulls.

> apply(data, 2, function(x) any(is.na(x)))

Great, there are no nulls! So all our customers in the transaction data has been
accounted for in the customer dataset.


#### For Task 2, we write this dataset into a csv file

> fwrite(data, paste0("QVI_data.csv"))

We can define some metrics of interest to the client:
- Who spends the most on chips (total sales), describing customers by lifestage and
how premium their general purchasing behaviour is
- How many customers are in each segment
- How many chips are bought per customer by segment
- What's the average chip price by customer segment
We could also ask our data team for more information. Examples are:
- The customer's total spend over the period and total spend for each transaction
to understand what proportion of their grocery spend is on chips
- Proportion of customers in each customer segment overall to compare against the
mix of customers who purchase chips

Let's start with calculating total sales by LIFESTAGE and PREMIUM_CUSTOMER and
plotting the split by these segments to describe which customer segment contribute
most to chip sales.

#### Total sales by LIFESTAGE and PREMIUM_CUSTOMER

> total_sales <- data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
> pf.total_sales <- summarise(total_sales,sales_count=sum(TOT_SALES))
> summary(pf.total_sales)

#### Create plot
> p <- ggplot(pf.total_sales) + geom_mosaic(aes(weight = sales_count, x = product(PREMIUM_CUSTOMER, LIFESTAGE),fill = PREMIUM_CUSTOMER)) + labs(x = "Lifestage", y = "Premium customer flag", title = "Proportion of sales") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) 
> p +geom_text(data = ggplot_build(p)$data[[1]], aes(x = (xmin + xmax)/2 , y = (ymin + ymax)/2, label = as.character(paste(round(.wt/sum(.wt),3)*100, '%'))), inherit.aes = F)

Sales are coming mainly from Budget - older families, Mainstream - young
	singles/couples, and Mainstream - retirees

#### Number of customers by LIFESTAGE and PREMIUM_CUSTOMER
Let's see if the higher sales are due to there being more customers who buy chips.

> total_sales <- data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
	no_of_customers <- summarise(total_sales,customer_count = length(unique(LYLTY_CARD_NBR))) 
  
> summary(no_of_customers)

#### Create plot
> p <- ggplot(data = no_of_customers) + geom_mosaic(aes(weight = customer_count, x = product(PREMIUM_CUSTOMER, LIFESTAGE), fill = PREMIUM_CUSTOMER)) + labs(x = "Lifestage", y = "Premium customer flag", title = "Proportion of customers") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+ geom_text(data = ggplot_build(p)$data[[1]], aes(x = (xmin + xmax)/2 , y = (ymin + ymax)/2, label = as.character(paste(round(.wt/sum(.wt),3)*100, '%'))))

There are more Mainstream - young singles/couples and Mainstream - retirees who buy chips. This contributes to there being more sales to these customer segments but this is not a major driver for the Budget - Older families segment.

Higher sales may also be driven by more units of chips being bought per customer.

Let's have a look at this next.

#### Average number of units per customer by LIFESTAGE and PREMIUM_CUSTOMER

> total_sales_1 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
> units <- summarise(total_sales_1, units_count = (sum(PROD_QTY)/uniqueN(LYLTY_CARD_NBR)))
> summary(units)

###create plot
> ggplot(data = units, aes(weight = units_count, x = LIFESTAGE, fill = PREMIUM_CUSTOMER)) + geom_bar(position = position_dodge()) +
	labs(x = "Lifestage", y = "Avg units per transaction", title = "Units per customer") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
	check <- units[order(units$units_count, decreasing = T),]

Older families and young families in general buy more chips per customer


#### Average price per unit by LIFESTAGE and PREMIUM_CUSTOMER

Let's also investigate the average price per unit chips bought for each customer segment as this is also a driver of total sales.

> total_sales_2 <-data %>% group_by(LIFESTAGE,PREMIUM_CUSTOMER)
> pricePerUnit <-  summarise(total_sales_2, price_per_unit = (sum(TOT_SALES)/sum(PROD_QTY)))

####plot
> ggplot(data=pricePerUnit, aes(weight = price_per_unit,x = LIFESTAGE, fill = PREMIUM_CUSTOMER)) + geom_bar(position = position_dodge()) + labs(x = "Lifestage", y = "Avg price per unit", title = "Price per unit") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))

Mainstream midage and young singles and couples are more willing to pay more per packet of chips compared to their budget and premium counterparts. This may be due to premium shoppers being more likely to buy healthy snacks and when they buy chips, this is mainly for entertainment purposes rather than their own consumption. This is also supported by there being fewer premium midage and young singles and couples buying chips compared to their mainstream counterparts.

As the difference in average price per unit isn't large, we can check if this difference is statistically different.

#### Perform an independent t-test between mainstream vs premium and budget midage and young singles and couples

# If this p-value is above .05, then there is not a significant difference in test scores.
> pricePerUnit <- data[, price := TOT_SALES/PROD_QTY]
> t.test(data[LIFESTAGE %in% c("YOUNG SINGLES/COUPLES", "MIDAGE SINGLES/COUPLES") & PREMIUM_CUSTOMER == "Mainstream", price],data[LIFESTAGE %in% c("YOUNG SINGLES/COUPLES", "MIDAGE SINGLES/COUPLES") & PREMIUM_CUSTOMER != "Mainstream", price], alternative = "greater")

The t-test results in a p-value < 2.2e-16, i.e. the unit price for mainstream, young and mid-age singles and couples ARE significantly higher than that of budget or premium, young and midage singles and couples.


## Deep dive into specific customer segments for insights

We have found quite a few interesting insights that we can dive deeper into.
We might want to target customer segments that contribute the most to sales to retain them or further increase sales. Let's look at Mainstream - young singles/couples. For instance, let's find out if they tend to buy a particular brand of chips.


#### Deep dive into Mainstream, young singles/couples 

> #xMain <- data %>% filter(PREMIUM_CUSTOMER=="Mainstream", #LIFESTAGE=="YOUNG SINGLES/COUPLES")
> #xMain1 <- xMain$BRAND
> #tab_fre_brand <- table(data$BRAND)
> #tab_fre_brand

 ###APRIORI

> #library(arules)
> #library(arulesViz)
> #glimpse(xMain1)
 
> #write.csv(xMain1, "try.csv")
> #tr <- read.transactions("try.csv", format = 'basket')
> #summary(tr)
> #library(RColorBrewer)
> #itemFrequencyPlot(tr,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")

#### Deep dive into Mainstream, young singles/couples

> segment1 <- data[LIFESTAGE == "YOUNG SINGLES/COUPLES" & PREMIUM_CUSTOMER == "Mainstream",]
> other <- data[!(LIFESTAGE == "YOUNG SINGLES/COUPLES" & PREMIUM_CUSTOMER =="Mainstream"),]

#### Brand affinity compared to the rest of the population

> quantity_segment1 <- segment1[, sum(PROD_QTY)]
> quantity_other <- other[, sum(PROD_QTY)]
> quantity_segment1_by_brand <- segment1[, .(targetSegment = sum(PROD_QTY)/quantity_segment1), by = BRAND]
> quantity_other_by_brand <- other[, .(other = sum(PROD_QTY)/quantity_other), by = BRAND]
> brand_proportions <- merge(quantity_segment1_by_brand, quantity_other_by_brand)[, affinityToBrand := targetSegment/other]
> brand_proportions[order(affinityToBrand)]
> ggplot(brand_proportions, aes(brand_proportions$BRAND,brand_proportions$affinityToBrand)) + geom_bar(stat = "identity",fill = "yellow") + labs(x = "Brand", y = "Customers Affinity to Brand", title = "Favorite brands of Customers") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))


We can see that:

â€¢ Mainstream young singles/couples are 23% more likely to purchase Tyrrells chips compared to the
rest of the population
â€¢ Mainstream young singles/couples are 56% less likely to purchase Burger Rings compared to the rest
of the population



[INSIGHTS]
Let's also find out if our target segment tends to buy larger packs of chips.


#### Preferred pack size compared to the rest of the population

> #xMain2 <- xMain$PACK_SIZE
> #tab_fre_brand <- table(data$BRAND)
> #tab_fre_brand
> #glimpse(xMain2)
 
> #write.csv(xMain2, "try2.csv")
> #tr1 <- read.transactions("try2.csv", format = 'basket')
> #summary(tr1)

> #library(RColorBrewer)

> #itemFrequencyPlot(tr1,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
> quantity_segment1_by_pack <- segment1[, .(targetSegment = sum(PROD_QTY)/quantity_segment1), by = PACK_SIZE]
> quantity_other_by_pack <- other[, .(other = sum(PROD_QTY)/quantity_other), by = PACK_SIZE]
> pack_proportions <- merge(quantity_segment1_by_pack, quantity_other_by_pack)[, affinityToPack := targetSegment/other]
> pack_proportions[order(affinityToPack)]

We can see that the preferred `PACK_SIZE` is 270g.

> data[PACK_SIZE == 270, unique(PROD_NAME)]

#Conclusion

Letâ€™s recap what weâ€™ve found!
Sales have mainly been due to Budget - older families, Mainstream young singles/couples, and Mainstream - retirees shoppers. We found that the high spend in chips for mainstream young singles/couples and retirees is due to there being more of them than other buyers. Mainstream, midage and young singles and couples are also more likely to pay more per packet of chips. This is indicative of impulse buying behaviour.

Weâ€™ve also found that Mainstream young singles and couples are 23% more likely to purchase Tyrrells chips compared to the rest of the population. The Category Manager may want to increase the categoryâ€™s performance by off-locating some Tyrrells and smaller packs of chips in discretionary space near segments where young singles and couples frequent more often to increase visibilty and impulse behaviour.
































































